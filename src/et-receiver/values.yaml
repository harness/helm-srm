# Default values for et-receiver.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Name should be overode with each receiver type i.e et-receiver-hit
name: et-receiver
replicaCount: 1
maxSurge: 100%
maxUnavailable: 0

global:
  kubeVersion: ""
  imagePullSecrets: []
  database:
    postgres:
      ## - installed = true if installed within cluster
      installed: true
      ## - protocol to use for connection
      protocol: postgres
      ## - host array for external
      hosts:
        - postgres:5432
      ## - secret name containing external values
      secretName: ""
      ## - key within secret containing username
      userKey: ""
      ## - key within secret containing password
      passwordKey: ""
      ## - extra arguments set to connection string
      extraArgs: ""

image:
  registry: docker.io
  repository: harness/et-receiver-signed
  pullPolicy: IfNotPresent
  tag: "5.3.0"
  digest: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

waitForInitContainer:
  image:
    registry: docker.io
    repository: harness/helm-init-container
    pullPolicy: IfNotPresent
    tag: "latest"
    digest: ""

# Postgres secret value and key
postgresPassword:
  name: postgres
  key: postgres-password

livenessProbe:
  enabled: true
  initialDelaySeconds: 40
  periodSeconds: 10
  failureThreshold: 3
  successThreshold: 1
  timeoutSeconds: 1

startupProbe:
  enabled: true
  initialDelaySeconds: 40
  periodSeconds: 10
  failureThreshold: 10
  successThreshold: 1
  timeoutSeconds: 1

readinessProbe:
  enabled: true
  initialDelaySeconds: 35
  periodSeconds: 5
  failureThreshold: 3
  successThreshold: 1
  timeoutSeconds: 1

# serviceAccount:
#   # Specifies whether a service account should be created
#   create: true
#   # Annotations to add to the service account
#   annotations: {}
#   # The name of the service account to use.
#   # If not set and create is true, a name is generated using the fullname template
#   name: ""

# Temp Hack to solve the following, will be fix soon .
#   User "system:serviceaccount:harness-1:harness-et-service" cannot list resource "pods" in API group "" in the namespace "harness-1"
serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "harness-default"
podAnnotations: {}

podSecurityContext: {}

securityContext:
  runAsUser: 65534
  runAsNonRoot: true

resources:
  limits:
    memory: 2Gi
  requests:
    cpu: 250m
    memory: 2Gi

autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

et:
  logLevel: INFO
  java:
    heapSize: "1600m"
  redis:
    enabled: true
    host:
    port: 6379
    trimCronExpression: "@hourly"
    streamLength: 500
    useSentinel: true
    streamLengths:
      AddHit: 2500
      ServiceStats: 1000
      AgentStats: 2500
      DeferredAgentStats: 1000
      Decompile: 1000
      SQL_Insertion: 2500
      SQL_LocInvInsertion: 2500
      SQL_MetricInsertion: 2500

  redisQueue:
    type: hit

  hikari:
    maximumPoolSize: 10
    connectionTimeout: 60000
  grpc:
    gitsyncTarget: ng-manager:13002
    gitsyncAuthority: ng-manager:13002
    gitsyncSSL: false

# extraVolumes:
#   - name: volume-test
#     configMap:
#       name: test-config
#       # readOnly: true
extraVolumes: []

# extraVolumeMounts:
#   - name: volume-test
#     mountPath: /opt/harness/config
extraVolumeMounts: []

lifecycleHooks: {}
# lifecycleHooks:
#   postStart:
#     exec:
#       command:
#   preStop:
#     exec:
#       command: