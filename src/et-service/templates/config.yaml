apiVersion: v1
kind: ConfigMap
metadata:
  name: et-service-env
  namespace: {{ .Release.Namespace }}
data:
  HOST_URL: "et-service"
  APP_ACL_URL: "{{ .Values.global.loadbalancerURL }}/authz/api/"
  JVM_HEAPSIZE: "{{ .Values.et.java.heapSize }}"
  HEAPDUMP_ON_OOM: "{{ .Values.et.java.enableHeapDump }}"
  DB_USER: "postgres"
  DB_URL: "postgres:5432"

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: et-service-config
  namespace: {{ .Release.Namespace }}
data:
  application.properties: |-
    logging.level.root={{ .Values.et.logLevel }}
    collector.listen.port={{ .Values.service.collectorPort }}
    {{- if .Values.et.redis.enabled }}
    spring.profiles.active=postgresql,msg_redis,service_stats
    redis.consumer.group=backend
    {{- else }}
    spring.profiles.active=postgresql,msg_inline
    {{- end }}

    {{- if .Values.et.dataRetention.verbose }}
    logging.level.com.overops.dataretention=DEBUG
    {{- end }}
    harness.dataretention.days={{ .Values.et.dataRetention.days }}
    harness.dataretention.schedule={{ .Values.et.dataRetention.schedule }}
    harness.dataretention.batchsize={{ .Values.et.dataRetention.batchSize }}
    harness.api.gateway={{ .Values.global.loadbalancerURL }}/gateway
    harness.gitsync.target={{ .Values.et.grpc.gitsyncTarget }}
    harness.gitsync.authority={{ .Values.et.grpc.gitsyncAuthority }}
    harness.gitsync.enableSsl={{ .Values.et.grpc.gitsyncSSL }}
    ng.manager.service.url={{ .Values.et.harness.ngManagerURL }}
    cvng.url={{ .Values.et.harness.cvngURL }}

  application-postgresql.properties: |-
    spring.datasource.url=jdbc:postgresql://${DB_URL}/overops?useLegacyDatetimeCode=false&rewriteBatchedStatements=true
    spring.datasource.username=${DB_USER}
    spring.datasource.password=${DB_PASS}

    spring.datasource.hikari.auto-commit=false
    spring.datasource.hikari.maximumPoolSize={{ .Values.et.hikari.maximumPoolSize }}
    spring.datasource.hikari.connectionTimeout={{ .Values.et.hikari.connectionTimeout }}

  my.server.properties: |-
    FRONTEND_HOST={{ .Values.global.loadbalancerURL }}/et

  data-migration.properties: |-
    spring.data.jpa.repositories.enabled=false
    spring.profiles.active=postgresql
    spring.datasource.url=jdbc:postgresql://${DB_URL}/overops?useLegacyDatetimeCode=false&rewriteBatchedStatements=true
    spring.datasource.username=${DB_USER}
    spring.datasource.password=${DB_PASS}
    spring.liquibase.change-log=classpath:/db/changelog/postgresql/db.changelog-master.xml

  {{- if .Values.et.redis.enabled }}
  application-msg_redis.properties: |-
    spring.cache.type=redis
    spring.cache.redis.enable-statistics=true
    {{- if .Values.et.redis.useSentinel }}
    spring.redis.sentinel.master=harness-redis
    spring.redis.sentinel.nodes=redis://redis-sentinel-harness-announce-0.{{ .Release.Namespace  }}:26379,redis://redis-sentinel-harness-announce-1.{{ .Release.Namespace  }}:26379,redis://redis-sentinel-harness-announce-2.{{ .Release.Namespace  }}:26379
    {{- else }}
    spring.redis.host={{ .Values.et.redis.host }}
    spring.redis.port={{ .Values.et.redis.port }}
    {{- end }}
    management.health.redis.enabled=true
    redis.stream.trimCronExpression={{ .Values.et.redis.trimCronExpression }}
    redis.stream.streamLength={{ .Values.et.redis.streamLength }}
    redis.stream.AddHit.maxLength={{ .Values.et.redis.streamLengths.AddHit }}
    redis.stream.ServiceStats.maxLength={{ .Values.et.redis.streamLengths.ServiceStats }}
    redis.stream.AgentStats.maxLength={{ .Values.et.redis.streamLengths.AgentStats }}
    redis.stream.DeferredAgentStats.maxLength={{ .Values.et.redis.streamLengths.DeferredAgentStats }}
    redis.stream.Decompile.maxLength={{ .Values.et.redis.streamLengths.Decompile }}
    redis.stream.SQL_Insertion.maxLength={{ .Values.et.redis.streamLengths.SQL_Insertion }}
    redis.stream.SQL_LocInvInsertion.maxLength={{ .Values.et.redis.streamLengths.SQL_LocInvInsertion }}
    redis.stream.SQL_MetricInsertion.maxLength={{ .Values.et.redis.streamLengths.SQL_MetricInsertion }}
  {{- end }}
